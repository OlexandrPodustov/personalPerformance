run:
  # default concurrency is a available CPU number
  concurrency: 14
  allow-parallel-runners: true

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  # vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs:
    - mock

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - "mock.go|mocks.go|flag.go"

output:
  # Print lines of code with issue.
  # Default: true
  print-issued-lines: false
  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

linters:
  enable:
    - asciicheck
    - bidichk
    - bodyclose # default one
    - containedctx
    # - contextcheck # Can't run linter goanalysis_metalinter: goanalysis_metalinter: contextcheck: package "company" (isInitialPkg: true, needAnalyzeSource: true): runtime error: invalid memory address or nil pointer dereference - https://github.com/golangci/golangci-lint/issues/3048#issuecomment-1202109607
    - cyclop # https://github.com/bkielbasa/cyclop Cyclop, compared to other alternative(https://github.com/fzipp/gocyclo), calculates both function and package cyclomatic complexity.
    - deadcode # default one
    - decorder
    - depguard
    - dogsled
    - dupl
    - durationcheck
    - errcheck # default one
    - errchkjson
    - errname # default one
    - errorlint
    - execinquery
    - exhaustive
    - exhaustruct
    - exhaustivestruct
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gas # not needed. alias for gosec. https://github.com/securego/gosec/commit/893b87b34342eadd448aba7638c5cc25f7ad26dd
    - gci
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    # - goheader # checks is file header matches to pattern - currently not needed. If turned on - configuration should be provided
    - goimports
    # - golint # is deprecated (since v1.41.0) due to: The repository of the linter has been archived by the owner.  Replaced by 'revive'.
    - gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple # default one
    - govet # default one
    - grouper
    - ifshort
    - importas
    - ineffassign # default one
    - interfacer # is deprecated (since v1.38.0) but still working
    - ireturn
    - lll
    # - maintidx # some test funcs has index 0.
    - makezero
    - maligned # is deprecated (since v1.38.0) but still working
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx # finds sending http request without context.Context
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - revive # default one
    - rowserrcheck
    - scopelint # is deprecated - but don't remove it unless you check the substitution checks the same well.
    - sqlclosecheck
    - staticcheck # default one
    - structcheck # default one
    # - stylecheck
    # - tagliatelle # enable it later # very nice linter - but discussion needed
    - tenv
    # - testpackage
    - thelper
    - tparallel
    - typecheck # default one
    - unconvert
    - unparam
    - unused # default one
    - usestdlibvars
    - varcheck # default one
    - varnamelen
    - wastedassign
    - whitespace
    # - wrapcheck # enable it later # doesn't turned on because it should be configured to check only places where we return err from 3rd parties
    # - wsl  # enable it later # configuration needed

linters-settings: # sorted alphabetically. linter doesn't work if settings are present but linter isn't enabled
  cyclop:
    # The maximal code complexity to report.
    max-complexity: 10
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 5
    # Should ignore tests.
    # Default: false
    skip-tests: true
  decorder:
    # required order of type, const, var and func declarations inside a file
    # default: types before constants before variables before functions
    dec-order:
      - const
      - type
      - var
      - func
    # if true, order of declarations is not checked at all
    # default: true (disabled)
    disable-dec-order-check: true

    # if true, init func can be anywhere in file (must not be declared before all other functions)
    # default: true (disabled)
    disable-init-func-first-check: false

    # if true, multiple global type, const and var declarations are allowed
    # default: true (disabled)
    disable-dec-num-check: true
  depguard:
    list-type: denylist
    include-go-root: true
    packages:
      - github.com/davecgh/go-spew/spew
      - errors
    packages-with-error-message:
      - "io/ioutil": "deprecated since 1.16"
  dogsled:
    max-blank-identifiers: 2
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 200
  errorlint:
    # Report non-wrapping error creation using fmt.Errorf
    errorf: true
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true
  errchkjson:
    # with check-error-free-encoding set to true, errchkjson does warn about errors
    # from json encoding functions that are safe to be ignored,
    # because they are not possible to happen (default false)
    #
    # if check-error-free-encoding is set to true and errcheck linter is enabled,
    # it is recommended to add the following exceptions to prevent from false positives:
    #
    #     linters-settings:
    #       errcheck:
    #         exclude-functions:
    #           - encoding/json.Marshal
    #           - encoding/json.MarshalIndent
    #           - (*encoding/json.Encoder).Encode
    check-error-free-encoding: false
    # if report-no-exported is true, encoding a struct without exported fields is reported as issue (default false)
    report-no-exported: true
  exhaustive:
    # check switch statements in generated files also
    check-generated: false
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: false
  forbidigo:
    # Forbid the following identifiers (list of regexp).
    forbid:
      - ^print$
      - ^println.*$
      - ^json.Unmarshal$
      - ^json.Marshal$
      # - 'fmt\.Print.*'
      # Optionally put comments at the end of the regex, surrounded by `(# )?`
      # Escape any special characters.
      # - 'fmt\.Print.*(# Do not commit print statements\.)?'
    # Exclude godoc examples from forbidigo checks.
    # Default: true
    exclude_godoc_examples: false
  funlen:
    # Function length linter config
    lines: 150
    statements: 100

  gci:
    # Checks that no inline Comments are present.
    # Default: false
    no-inline-comments: true

    # Checks that no prefix Comments(comment lines above an import) are present.
    # Default: false
    no-prefix-comments: true

    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().

    # Default: ["standard", "default"]
    sections:
      - standard # Captures all standard packages if they do not match another section.
      - default # Contains all imports that could not be matched to another section type.
      # - comment(your text here) # Prints the specified indented comment.
      # - newLine # Prints an empty line

    # Separators that should be present between sections.
    # Default: ["newLine"]
    section-separators:
      - newLine
  gocognit:
    min-complexity: 15
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  gocritic:
    enabled-checks:
      - appendAssign
      - appendCombine
      - argOrder
      - assignOp
      - badCall
      - badCond
      - badRegexp
      - boolExprSimplify
      - builtinShadow
      - captLocal
      - caseOrder
      - codegenComment
      - commentFormatting
      - commentedOutCode
      - commentedOutImport
      - defaultCaseOrder
      - deferUnlambda
      - deprecatedComment
      - docStub
      - dupArg
      - dupBranchBody
      - dupCase
      - dupImport
      - dupSubExpr
      - elseif
      - emptyFallthrough
      - emptyStringTest
      - equalFold
      - evalOrder
      - exitAfterDefer
      - filepathJoin
      - flagDeref
      - flagName
      - hexLiteral
      - hugeParam
      - ifElseChain
      - importShadow
      - indexAlloc
      - initClause
      - mapKey
      - methodExprCall
      - nestingReduce
      - newDeref
      - nilValReturn
      - octalLiteral
      - offBy1
      - paramTypeCombine
      - ptrToRefParam
      - rangeExprCopy
      - rangeValCopy
      - regexpMust
      - regexpPattern
      - regexpSimplify
      - ruleguard
      - singleCaseSwitch
      - sloppyLen
      - sloppyReassign
      - sloppyTypeAssert
      - sortSlice
      - sqlQuery
      - stringXbytes
      - switchTrue
      - truncateCmp
      - typeAssertChain
      - typeSwitchVar
      - typeUnparen
      - underef
      - unlabelStmt
      - unlambda
      # - unnamedResult # turn on from time to time.
      - unnecessaryBlock
      - unnecessaryDefer
      - unslice
      - valSwap
      - weakCond
      - whyNoLint # lots of false positives. seems that it overlaps nolintlint functionality
      - wrapperFunc
      - yodaStyleExpr
    settings:
      rangeValCopy:
        sizeThreshold: 128
      hugeParam:
        sizeThreshold: 185
  gocyclo:
    # minimal code complexity to report, 30 by default (recommended 10-20)
    min-complexity: 10
  godot:
    # comments to be checked: `declarations`, `toplevel`, or `all`
    # Default: declarations
    scope: toplevel
    # check all top-level comments, not only declarations
    check-all: false
    # check that each sentence starts with a capital letter
    capital: true

  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  gofumpt:
    extra-rules: true
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
  gomnd:
    # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
    checks:
      - argument
      - case
      - condition
      - operation
      - return
      - assign
    # List of numbers to exclude from analysis.
    # The numbers should be written as string.
    # Values always ignored: "1", "1.0", "0" and "0.0"
    ignored-numbers:
      - "0666"
      - "0755"
    # List of file patterns to exclude from analysis.
    # Values always ignored: `.+_test.go`
    ignored-files:
      - "magic1_.*.go"
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Time`
    ignored-functions:
      - "math.*"
      - "http.StatusText"
  gomoddirectives:
    # Allow local `replace` directives.
    replace-local: false
    # List of allowed `replace` directives.
    # Default: []
    replace-allow-list:
      - github.com/afex/hystrix-go
    # Allow to not explain why the version has been retracted in the `retract` directives.
    # Default: false
    retract-allow-no-explanation: false
    # Forbid the use of the `exclude` directives.
    # Default: false
    exclude-forbidden: false
  # gomodguard:
  #   allowed:
  #     domains:
  #       - "gopkg.in"
  #       - "github.com"
  govet:
    # report about shadowed variables
    check-shadowing: true
    disable:
      - fieldalignment # produces a lot of warnings which are not topical at the moment
    # settings per analyzer
    settings:
      shadow:
        strict: true
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    enable-all: true
  grouper:
    # Require the use of a single global 'const' declaration only.
    # Default: false
    const-require-single-const: false
    # Require the use of grouped global 'const' declarations.
    # Default: false
    const-require-grouping: false

    # Require the use of a single 'import' declaration only.
    # Default: false
    import-require-single-import: true
    # Require the use of grouped 'import' declarations.
    # Default: false
    import-require-grouping: false

    # Require the use of a single global 'type' declaration only.
    # Default: false
    type-require-single-type: false
    # Require the use of grouped global 'type' declarations.
    # Default: false
    type-require-grouping: false

    # Require the use of a single global 'var' declaration only.
    # Default: false
    var-require-single-var: false
    # Require the use of grouped global 'var' declarations.
    # Default: false
    var-require-grouping: false
  ifshort:
    # Maximum length of variable declaration measured in number of lines, after which linter won't suggest using short syntax.
    # Has higher priority than max-decl-chars.
    # Default: 1
    max-decl-lines: 2
    # Maximum length of variable declaration measured in number of characters, after which linter won't suggest using short syntax.
    # Default: 30
    max-decl-chars: 40
  importas:
    # Do not allow unaliased imports of aliased packages.
    # Default: false # if set to `true`, force to use alias.
    no-unaliased: true
    # Do not allow non-required aliases.
    # Default: false
    no-extra-aliases: false
    # List of aliases
    # alias:
  ireturn:
    # reject-list of interfaces
    # reject:
    #   - github.com\/user\/package\/v4\.Type
    allow:
      - anon
      - error
      - empty
      - stdlib
      - (or|er)$ # You can specify idiomatic endings for interface

  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 250
    tab-width: 4 # to see in action set to 100 or so
  makezero:
    # Allow only slices initialized with a length of zero.
    # Default: false
    always: true
  maintidx:
    # Show functions with maintainability index lower than N.
    # A high index indicates better maintainability (it's kind of the opposite of complexity).
    # default: 20
    under: 10
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - someword
      - colour
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 40
  nestif:
    min-complexity: 2
  nilnil: # local/business/service/repository/pack.go:98:3: return both the `nil` error and invalid value: use a sentinel error instead (nilnil)
    checked-types: # By default, nilnil checks all returned types below:
      # - ptr # enable it later
      # - func # enable it later
      # - iface # enable it later
      # - map # enable it later
      - chan
  nlreturn:
    # Size of the block (including return statement that is still "OK")
    # so no return split required.
    # Default: 1
    block-size: 2
  nolintlint:
    # Enable to ensure that nolint directives are all used. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: false
    # Exclude following linters from requiring an explanation.  Default is [].
    allow-no-explanation: []
    # Enable to require an explanation after each nolint directive. Default is false.
    require-explanation: true
    # Enable to require an explanation after each nolint directive. Default is false.
    require-specific: false

  nonamedreturns:
    # Report named error if it is assigned inside defer.
    # Default: false
    report-error-in-defer: true

  paralleltest:
    # Ignore missing calls to `t.Parallel()` and only report incorrect uses of it.
    # Default: false
    ignore-missing: true

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.
    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  predeclared:
    # Comma-separated list of predeclared identifiers to not report on.
    # Default: ""
    # ignore: "new,int"
    # Include method names and field names (i.e., qualified names) in checks.
    # Default: false
    q: true
  promlinter:
    # Promlinter cannot infer all metrics name in static analysis.
    # Enable strict mode will also include the errors caused by failing to parse the args.
    # Default: false
    strict: true
    # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
    # disabled-linters:
    #  - Help
    #  - MetricUnits
    #  - Counter
    #  - HistogramSummaryReserved
    #  - MetricTypeInName
    #  - ReservedChars
    #  - CamelCase
    #  - UnitAbbreviations
  revive:
    # Maximum number of open files at the same time.
    # https://github.com/mgechev/revive#command-line-flags
    # Defaults to unlimited.
    max-open-files: 2048
    # See https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: true
    severity: warning
    rules:
      # ignored due to a performance problem (https://github.com/golangci/golangci-lint/issues/2997
      # - name: context-keys-type
      # - name: time-equal
      # - name: time-naming
      # - name: var-declaration
      # - name: unexported-return
      # - name: errorf
      # - name: modifies-value-receiver
      # - name: range-val-address
      # - name: unhandled-error #[]string
      # - name: string-of-int

      - name: blank-imports
      - name: context-as-argument
      - name: dot-imports
      - name: error-return
      - name: error-strings # []string
      - name: error-naming
      - name: exported # []string
        arguments:
          # - "disableStutteringCheck"
          - "sayRepetitiveInsteadOfStutters"
          # - "checkPrivateReceivers"
      - name: if-return
      - name: increment-decrement
      - name: var-naming # []string
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: indent-error-flow
      - name: argument-limit
        arguments:
          - 7
      - name: cyclomatic
        arguments:
          - 10
      - name: max-public-structs
        arguments:
          - 15
      # - name: file-header
      - name: empty-block
      - name: superfluous-else
      # - name: confusing-naming
      - name: get-return
      - name: modifies-parameter
      # - name: confusing-results
      - name: deep-exit
      - name: unused-parameter
      - name: unreachable-code
      # - name: add-constant # may be enabled later
      # - name: flag-parameter # may be enabled later
      - name: unnecessary-stmt
      - name: struct-tag
      - name: constant-logical-expr
      - name: bool-literal-in-expr
      - name: redefines-builtin-id
      - name: function-result-limit
        arguments:
          - 4
      # - name: imports-blacklist # []string
      - name: range-val-in-closure
      - name: waitgroup-by-value
      - name: atomic
      - name: empty-lines
      - name: line-length-limit
        arguments:
          - 444
      - name: call-to-gc
      - name: duplicated-imports
      - name: import-shadowing
      - name: bare-return
      - name: unused-receiver
      - name: cognitive-complexity
        arguments:
          - 24
      - name: string-format # map
      - name: early-return
      - name: unconditional-recursion
      - name: identical-branches
      - name: defer # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#defer
        arguments:
          - [
              "call-chain",
              "loop",
              "method-call",
              "recover",
              "immediate-recover",
              "return",
            ]
      - name: unexported-naming
      # - name: function-length # the maximum allowed statements and lines - disabled
      #   arguments:
      #     - 27
      #     - 2212
      - name: nested-structs
      - name: useless-break
      # - name: banned-characters # []string
      - name: optimize-operands-order
      # - name: use-any
      # - name: datarace # can't run linter goanalysis_metalinter: the_only_name: cannot find rule: datarace

  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx
  tagliatelle:
    # Check the struck tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: goCamel
        yaml: camel
        xml: camel
        bson: lower
        avro: snake
        mapstructure: kebab
  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # By default, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    all: true
  testpackage:
    # regexp pattern to skip files
    skip-regexp: (config|loader|graphql.resolvers)_test\.go
  thelper:
    # The following configurations enable all checks.
    # All checks are enabled by default.
    test:
      first: true
      name: true
      begin: true
    benchmark:
      first: false
      name: false
      begin: false
    tb:
      first: false
      name: false
      begin: false
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  usestdlibvars:
    # Suggest the use of http.MethodXX
    # Default: true
    http-method: true
    # Suggest the use of http.StatusXX
    # Default: true
    http-status-code: true
    # Suggest the use of time.Weekday
    # Default: true
    time-weekday: true
    # Suggest the use of time.Month
    # Default: false
    time-month: true
    # Suggest the use of time.Layout
    # Default: false
    time-layout: true
    # Suggest the use of crypto.Hash
    # Default: false
    crypto-hash: true
    # Suggest the use of pc.DefaultXXPath
    # Default: false
    default-rpc-path: true

  unparam:
    # https://pkg.go.dev/github.com/golangci/unparam
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: true
  varnamelen:
    # The longest distance, in source lines, that is being considered a "small scope." (defaults to 5)
    # Variables used in at most this many lines will be ignored.
    max-distance: 72
    # The minimum length of a variable's name that is considered "long." (defaults to 3)
    # Variable names that are at least this long will be ignored.
    min-name-length: 3
    # Check method receiver names. (defaults to false)
    check-receiver: false
    # Check named return values. (defaults to false)
    check-return: false
    # Optional list of variable names that should be ignored completely. (defaults to empty list)
    ignore-names:
      - err
      - tt
  whitespace:
    multi-if: false # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  # wsl: # config is for example
  #   # If true append is only allowed to be cuddled if appending value is
  #   # matching variables, fields or types on line above. Default is true.
  #   strict-append: true
  #   # Allow calls and assignments to be cuddled as long as the lines have any
  #   # matching variables, fields or types. Default is true.
  #   allow-assign-and-call: true
  #   # Allow multiline assignments to be cuddled. Default is true.
  #   allow-multiline-assign: true
  #   # Allow declarations (var) to be cuddled.
  #   allow-cuddle-declarations: false
  #   # Allow trailing comments in ending of blocks
  #   allow-trailing-comment: false
  #   # Force newlines in end of case at this limit (0 = never).
  #   force-case-trailing-whitespace: 0
  #   # Force cuddling of err checks with err var assignment
  #   force-err-cuddling: false
  #   # Allow leading comments to be separated with empty liens
  #   allow-separated-leading-comment: false

issues:
  exclude-use-default: false
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
  exclude-rules: # Excluding configuration per-path, per-linter, per-text and per-source
    - linters:
        - govet
      text: 'declaration of "err" shadows declaration at line'
    - linters: # Exclude lll issues for long lines with go:generate
        - lll
      source: "^//go:generate "
    - path: _test\.go # Exclude some linters from running on tests files.
      linters:
        - gocognit
        - containedctx
        - varnamelen
        - funlen
    - path: perror
      text: "`errors` is in the denylist"
    - path: perror
      linters:
        - goerr113
    - path: graphql.resolvers.go
      linters:
        - revive
